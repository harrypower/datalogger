This is a project that started out as a clone from my gforth_webserver repository.
Please see and or clone the gforth_webserver repository as this one will not contain any help for general consumption.

This code needs the inetd service running and setup as bellow.

To use this server you need to install Gforth, inetd and then configure this service and adjust the path for the web files.
The steps are below( do this on the pi or via sshing into the pi):
-Install stuff
    $ sudo apt-get install gforth libtool libltdl-dev libffi-dev autoconf m4
    $ sudo apt-get install openbsd-inetd
    $ sudo apt-get install sqlite3 libsqlite3-dev
-Install the BBB_Gforth_gpio library submodule 

# need to rewrite this 
    $ sudo git submodule init
    $ sudo git submodule update

# not had some issues with these shared librarys... 
.. first run from command line as a user the htu21d_i2c.fs and the bmp180_i2c.fs stuff so gforth can make the librarys on your system
.. now the shared library and object code and c code that gforth makes needs to be copied to a folder as follows
$ sudo cp -R /home/yourusername/.gforth / 
.. this copies the files to /.gforth and all the files and sub folders are included

# now the rest of this document needs to be rewritten it is all incorrect and outdated


	Now follow the README in the gpio directory for information on compiling the C code into a shared library.
	Run gforth as in the README in the gpio directory and enter the following as show in that README:
    include rpi_GPIO_lib.fs
	There should be no message if all is working.  Note if you need to recompile the library just follow the README file for how to remove the old and recompile the new library.
        Then use ./clean command to remove the gforth library and then do the above include rpi_GPIO_lib.fs from gforth command line to reconnect the c library to gforth.  
-Install dependant Chart.js library submodule ( this is only needed if you want to see the chart test or work with it in any way!)
	Nothing else is needed to be done for this submodule as the above submodule init did the work.
	Note there are example html files in this submodule directory for example usage of the chart.js library.
-Install dependant Gforth-Tools submodule ( this is the sqlite3 database stuff ).
        Nothing esle is needed on this submodule as the above submodule init did the work.
        If you want to you can test, remove and retest the sqlite3 library as follows:
        First cd to be working in the Gforth-Tools directory.
        Then issue the following to ensure it works correctly:
    $ sudo gforth sqlite3_gforth_lib.fs 
        This should put you at a command line in Gforth with no errors.  If this happens you are done and all is ok ... type bye enter to exit gforth.
        If you get an error you can remove the sqlite3 library for gforth as follows:
    $ sudo ./clean_mysqlite3_gforth_lib
        This just is a simple batch file that removes all the sqilte3 gforth library stuff so you can do the above step again to test.
        This should allow the above test to work without errors because after the existing files are removed recompiling it should have no conflics.
        There is a wiki with possibly more info on the github page for this library.  Look for Gforth-Tools.
-Configure inetd service and start the webserver as follows:
    $ sudo nano /etc/inetd.conf
	Move the curser to the end of the document and enter the following text:
	http stream tcp nowait.1000 yourusername /home/pi/git/datalogger/httpd.fs
	Note the path in the above line is the path for where you installed this repository.
	Save the file with control x y enter
	Now at this moment you can restart your pi as follows:
    $ sudo shutdown "now" -r
When the pi starts up it will serve index.html !
-Configure path for repository as follows:
	There is a batch file called configure in the datalogger directory.  Use it as follows:
    $ sudo ./configure
	This just puts a file in /var/lib/datalogger-gforth/ directory called datalogger_home_path. 
	In this file is simply stored the path to the repository so now the project can find files in this repository.  
	Note the web server and the mbed-sensor-client.fs programs us this method to find where files are!
-The data collection is done with sensor-client.fs in /collection directory.  This is a script/Gforth file that can run at boot time if done as follows:
     $ sudo nano /etc/rc.local 
        This above command will open the file for editing that is used to run a script at the end of boot processes. Place the following into file before exit at bottom of the file:
     ####
     /home/pi/git/datalogger/collection/sensor-client.fs -r & 
     ####
        Note this will run the sensor-client.fs gforth program as root after boot up is done and collection will be every 5 min.
	Note this script starts with #! but it will start gforth for the compiling of the rest of sensor-client.fs. 
        Data collection will be in a file called datalogged.data and this is a sqlite3 database file!
-The database is stored in the collection directory and is in a file called datalogged.data.  This dbfile can be backup up with the program in that directory called usbcopydb.fs .
        This program could be set up to run in a cron job as root with the following:
     $ sudo crontab -e
        Then enter this line at the bottom of the text that is in the editor:
     0 23 * * * /home/pi/git/datalogger/collection/usbcopydb.fs >/dev/null 2>&1
     0 15 * * * /home/pi/git/datalogger/collection/usbcopydb.fs >/dev/null 2>&1

        A directory needs to be made for mounting point with the following:
     $ sudo mkdir /mnt/usb0 
        This will setup a backup to a usb stick twice per day ( 23 hour and 15 hour).
   	The backup will be called datalogged.yearmonthday (year month and day replaced with the numbers for those values). 
	You can change the cron job to anything you want or even change the usbcopydb.fs program to work any way you want!
