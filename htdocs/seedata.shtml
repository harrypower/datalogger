<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>chart data</title>
</head>
<link rel="stylesheet" type="text/css" href="styleA.css">
<BODY>
  <$
  require ../collection/gforth-misc-tools.fs
  require ../collection/stringobj.fs
  require ../collection/db-stuff.fs
  require ../collection/svgchart.fs
  require ../collection/script.fs

  false constant testing  \ set to true for testing false no testing

  svgchartmaker heap-new constant asvgchart
  strings heap-new constant txtattr
  strings heap-new constant txtattr1
  strings heap-new constant txtattr2
  strings heap-new constant txtattr3
  strings heap-new constant mincircleattr
  strings heap-new constant maxcircleattr
  strings heap-new constant avgcircleattr
  strings heap-new constant lablexattr
  strings heap-new constant lableyattr
  strings heap-new constant lablelineattr
  strings heap-new constant mindataattr
  strings heap-new constant maxdataattr
  strings heap-new constant avgdataattr

  strings heap-new constant thedate
  string heap-new constant tempargs
  strings heap-new constant splitargs
  strings heap-new constant parsedargs
  string heap-new constant junk$
  string heap-new constant alldata$
  strings heap-new constant xlable
  strings heap-new constant mindata
  strings heap-new constant maxdata
  strings heap-new constant avgdata
  strings heap-new constant alldatarow
  string heap-new constant parser

  s\" style=\"stroke: #0000ff; stroke-width:1; fill:none;\"" mindataattr !$x

  s\" style=\"stroke: #ff0000; stroke-width:1; fill:none;\"" maxdataattr !$x

  s\" style=\"stroke: #00ff00; stroke-width:1; fill:none;\"" avgdataattr !$x

  s\" fill=\"rgb(0,0,0)\""      txtattr !$x
  s\" fill-opacity=\"1.0\""       txtattr !$x
  s\" stroke=\"rgb(0,0,0)\""    txtattr !$x
  s\" stroke-opacity=\"1.0\""     txtattr !$x
  s\" stroke-width=\"1.0\""       txtattr !$x
  s\" font-size=\"30px\""         txtattr !$x

  s\" fill=\"rgb(255,0,0)\""      txtattr1 !$x
  s\" fill-opacity=\"1.0\""       txtattr1 !$x
  s\" stroke=\"rgb(255,0,0)\""    txtattr1 !$x
  s\" stroke-opacity=\"1.0\""     txtattr1 !$x
  s\" stroke-width=\"1.0\""       txtattr1 !$x
  s\" font-size=\"30px\""         txtattr1 !$x

  s\" fill=\"rgb(0,255,0)\""      txtattr2 !$x
  s\" fill-opacity=\"1.0\""       txtattr2 !$x
  s\" stroke=\"rgb(0,255,0)\""    txtattr2 !$x
  s\" stroke-opacity=\"1.0\""     txtattr2 !$x
  s\" stroke-width=\"1.0\""       txtattr2 !$x
  s\" font-size=\"30px\""         txtattr2 !$x

  s\" fill=\"rgb(0,0,255)\""      txtattr3 !$x
  s\" fill-opacity=\"1.0\""       txtattr3 !$x
  s\" stroke=\"rgb(0,0,255)\""    txtattr3 !$x
  s\" stroke-opacity=\"1.0\""     txtattr3 !$x
  s\" stroke-width=\"1.0\""       txtattr3 !$x
  s\" font-size=\"30px\""         txtattr3 !$x

  s\" fill=\"rgb(0,0,255)\""      lablexattr !$x
  s\" fill-opacity=\"1.0\""       lablexattr !$x
  s\" stroke=\"rgb(0,0,255)\""    lablexattr !$x
  s\" stroke-opacity=\"1.0\""     lablexattr !$x
  s\" stroke-width=\"0.8\""       lablexattr !$x
  s\" font-size=\"10px\""         lablexattr !$x

  s\" fill=\"rgb(0,0,255)\""      lableyattr !$x
  s\" fill-opacity=\"1.0\""       lableyattr !$x
  s\" stroke=\"rgb(0,0,255)\""    lableyattr !$x
  s\" stroke-opacity=\"1.0\""     lableyattr !$x
  s\" stroke-width=\"1.0\""       lableyattr !$x
  s\" font-size=\"20px\""         lableyattr !$x

  s\" fill=\"rgb(0,0,255)\""      mincircleattr !$x
  s\" fill-opacity=\"0.5\""       mincircleattr !$x
  s\" stroke=\"rgb(0,0,255)\""    mincircleattr !$x
  s\" stroke-opacity=\"1.0\""     mincircleattr !$x
  s\" stroke-width=\"2.0\""       mincircleattr !$x

  s\" fill=\"rgb(255,0,0)\""      maxcircleattr !$x
  s\" fill-opacity=\"0.5\""       maxcircleattr !$x
  s\" stroke=\"rgb(255,0,0)\""    maxcircleattr !$x
  s\" stroke-opacity=\"1.0\""     maxcircleattr !$x
  s\" stroke-width=\"2.0\""       maxcircleattr !$x

  s\" fill=\"rgb(0,255,0)\""      avgcircleattr !$x
  s\" fill-opacity=\"0.5\""       avgcircleattr !$x
  s\" stroke=\"rgb(0,255,0)\""    avgcircleattr !$x
  s\" stroke-opacity=\"1.0\""     avgcircleattr !$x
  s\" stroke-width=\"2.0\""       avgcircleattr !$x

  s\" fill-opacity=\"0.0\""       lablelineattr !$x
  s\" stroke=\"rgb(0,255,0)\""    lablelineattr !$x
  s\" stroke-opacity=\"1.0\""     lablelineattr !$x
  s\" stroke-width=\"1.0\""       lablelineattr !$x

  time&date
  #to$ thedate !$x \ year
  #to$ thedate !$x \ month
  dup 1 = [if] drop 28 [else] 1 - [then]
  #to$ thedate !$x \ day
  #to$ thedate !$x \ hour
  2drop
  thedate reset
  url-args $@ swap drop 0 =
  [if] \ make default args
    s" data=co2&year=" tempargs !$
    thedate @$x tempargs !+$
    s" &month=" tempargs !+$
    thedate @$x tempargs !+$
    s" &day=" tempargs !+$
    thedate @$x tempargs !+$
    s" &hour=" tempargs !+$
    thedate @$x tempargs !+$
    s" &time=H&quantity=24" tempargs !+$
    tempargs @$ url-args $!
    thedate reset
  [then]
  url-args $@ tempargs !$
  s" &" tempargs !+$
  s" &" tempargs @$ splitargs split$>$s
  testing [if]
  : testit
  time&date . space . space . space . space . space . space ." <br>"
  splitargs $qty dup . ." <br>" splitargs reset
  0 ?do splitargs @$x type ." <br>" loop ; testit [then]
  : orderargs ( -- ) \ simply place the args in correct order to parsedargs
    splitargs reset splitargs $qty 0
    do splitargs @$x tempargs !$
      s" =" tempargs split$ drop parsedargs !$x 2drop loop ;
  orderargs
  : test$size ( caddr u nsize -- caddr1 u1 ) \ adjust caddr u to ensure it is a string of nsize if it is smaller
    { nsize }
    junk$ !$
    junk$ len$ nsize <
    if nsize junk$ len$ - 0 ?do  s" 0" junk$ !<+$ loop then
    junk$ @$ ;
  : test$number ( caddr u nmin nmax ndigits -- caddr1 u1 )
    \ take caddr u string and convert to number then test if number is in nmin to nmax limits
    \ output caddr1 u1 string of number with ensured ndigits in string of number
    \ If number falls outside of nmin and nmax simply output nmin as a string ensuring ndigits in string
     { caddr u nmin nmax ndigits }
     caddr u s>number? true =
     if \ is a number
      d>s dup nmin < swap nmax > or true =
      if \ number ouside of nmin and nmax
        nmin #to$ ndigits test$size
      else
        caddr u ndigits test$size
      then
     else \ not a number
      2drop
      nmin #to$ ndigits test$size
     then ;
  : Hdonly ( caddr u -- caddr1 u1 ) \ test for H or d and if not found default to H
    { caddr u }
    caddr u s" H" compare 0 if caddr u else
    caddr u s" d" compare 0 if caddr u else s" H" then
    then ;

  : fixargs ( -- ) \ ensure day month day hour are two digit strings
    parsedargs reset
    splitargs destruct
    parsedargs @$x splitargs !$x
    parsedargs @$x 2015 2015 4 test$number splitargs !$x
    parsedargs @$x 1 12 2 test$number splitargs !$x
    parsedargs @$x 1 31 2 test$number splitargs !$x
    parsedargs @$x 0 23 2 test$number splitargs !$x
    parsedargs @$x splitargs !$x
    parsedargs @$x 1 100 2 test$number splitargs !$x
    parsedargs destruct
    splitargs parsedargs copy$s ;
    fixargs

  testing [if]
  : testit3
    splitargs $qty dup . ." <br>" 0 do splitargs @$x type ." <br>" loop ; testit3
  : testit2
    parsedargs $qty dup . ." <br>" parsedargs reset
    0 ?do parsedargs @$x type space i . ." <br>" loop ; testit2 [then]

  parsedargs getlocalNminmaxavg alldata$ !$
  testing [if] alldata$ @$ type ." <br>" [then]
  : splitdatarows ( -- ) \ take alldata$ and put it in to alldatarow
    s\" \n" parser !$
    parser alldata$ alldatarow split$to$s ;
  splitdatarows

  testing [if]
  : testit3 ( -- )
    alldatarow $qty 0 do alldatarow @$x type ." <br>" loop ; testit3 [then]

  : splitdatatobins ( -- )
    alldatarow reset
    alldatarow $qty 0 ?do
      alldatarow @$x junk$ !$ s" ," junk$ split$ drop
      2swap xlable !$x junk$ !$ s" ," junk$ split$ drop
      2swap mindata !$x junk$ !$ s" ," junk$ split$ drop
      2swap maxdata !$x junk$ !$ s" ," junk$ split$ drop
      2drop avgdata !$x
    loop ;
  splitdatatobins

  testing [if]
  : testit4 ( -- )
    ." lables <br>" xlable $qty 0 do xlable @$x type ." <br>" loop
    ." mindata <br>" mindata $qty 0 do mindata @$x type ." <br>" loop
    ." maxdata <br>" maxdata $qty 0 do maxdata @$x type ." <br>" loop
    ." avgdata <br>" avgdata $qty 0 do avgdata @$x type ." <br>" loop ; testit4 [then]

   $>

<$ testing [if] ." <p>url args:" url-args $@ type ." </p>" [then] $>
<$
: decsize ( caddr u -- n ) \ return decimal size based on the data value input string
  { caddr u }

;

xlable reset mindata reset asvgchart construct
100 1500 200     asvgchart setchart-prop
3                asvgchart setdtpts-circle-prop
200 40 10 4 10   asvgchart setylable-prop
4 10 30 0        asvgchart setylable-text-prop
140 10 90        asvgchart setxlable-prop

xlable lablexattr lableyattr lablelineattr asvgchart setlabledataattr
mindata mindataattr mincircleattr asvgchart setdata
maxdata maxdataattr maxcircleattr asvgchart setdata
avgdata avgdataattr avgcircleattr asvgchart setdata

0 parsedargs []@$ drop junk$ !$ s"  chart" junk$ !+$
junk$ 800 30 txtattr asvgchart settext
s" min " junk$ !$ \ 0 parsedargs []@$ drop junk$ !+$
junk$ 750 60 txtattr3 asvgchart settext
s" max " junk$ !$ \ 0 parsedargs []@$ drop junk$ !+$
junk$ 850 60 txtattr1 asvgchart settext
s" avg " junk$ !$ \ 0 parsedargs []@$ drop junk$ !+$
junk$ 950 60 txtattr2 asvgchart settext

asvgchart makechart dup false =
[if]
   drop type
[else]
   ." Error in getting data or rendering data: " #to$ type
[then]

: testselection ( n caddr u -- ) \ test selection n for string caddr u and if found type selected="selected" to stdout
  rot parsedargs []@$ drop compare 0 = if s\"  selected=\"selected\"" type then ;
$>
<h1>Select options below to see the data</h1>
<form action="seedata.shtml"  method="get">
Data to view:
<select name="data">
  <option <$ 0 s" co2" testselection $> value="co2">co2</option>
  <option <$ 0 s" nh3" testselection $> value="nh3">nh3</option>
  <option <$ 0 s" temp" testselection $> value="temp">Temperature</option>
  <option <$ 0 s" humd" testselection $> value="humd">Humidity</option>
  <option <$ 0 s" pressure" testselection $> value="pressure">Pressure</option>
</select><br>
Start Year:
<input type="number" name="year" min="2015" max="2020" <$ s\" value=\"" type 1 parsedargs []@$ drop type $> "><br>
Start Month:
<input type="number" name="month" min="1" max="12" <$ s\" value=\"" type 2 parsedargs []@$ drop type $> "><br>
Start Day:
<input type="number" name="day" min="1" max="31" <$ s\" value=\"" type 3 parsedargs []@$ drop type $> "><br>
Start Hour:
<input type="number" name="hour" min="0" max="23" <$ s\" value=\"" type 4 parsedargs []@$ drop type $> "><br>
Time frame to view:
<select name="time">
  <option <$ 5 s" H" testselection $> value="H">Hour</option>
  <option <$ 5 s" d" testselection $> value="d">Day</option>
</select><br>
Quantity of data to view:
<input type="number" name="quantity" min="1" max="100" <$ s\" value=\"" type 6 parsedargs []@$ drop type $> "><br>
<input type="submit" value="submit">
</form>

<p>Submit to see the selected data!</p>
<p>Current server time: <$ s" date" shget drop type $> </p>
</body>
</html>
