<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Logged Temperature Humidity and Barometric Pressure</title>
</head>
<$
include ../string.fs
include ../Gforth-Tools/sqlite3_gforth_lib.fs
decimal

true value rvdataerror
variable rvdata$ rvdata$ $init
variable datalogger_path$ 
variable junks$

s" /var/lib/datalogger-gforth/datalogger_home_path" slurp-file datalogger_path$ $!
s" /collection/sensordb.data" datalogger_path$ $@ junks$ $! junks$ $+!
junks$ $@ dbname

: dto$ ( d -- caddr u )  \ convert double signed to a string
    swap over dabs <<# #s rot sign #> #>> ;

: nextcomma ( caddr u -- caddr1 u1 nflag ) \ nflag is true if next comma is found and caddr u contains the string past that comma
    s" ," search if
	swap 1 + swap 1 - true
    then ;

: #uptocomma { caddr u -- d nflag } \ nflag is true is d is the number from string before a comma
    caddr u s" ," search if
	swap drop u swap - caddr swap s>number?
    else
	0 0 false
    then ;

: #pastxcomma { caddr u n#comma -- d nflag } \ nflag is true if n#comma is found and a number d can be extracted from it  
    try
	n#comma 0 ?do
	    caddr u nextcomma if to u to caddr else 1 throw then 
	loop
	caddr u #uptocomma 
    restore 1 = if 0 0 false else true then   
    endtry ;

: $pastxcomma { caddr u n#comma -- caddr1 u1 nflag } \ nflag is true if n#comma is found .. the caddr1 u1 will contain the string before that last comma  
    try
	n#comma 0 ?do
	    caddr u nextcomma if to u to caddr else 1 throw then
	loop
	caddr u true
    restore 1 = if 0 0 false else true then 
    endtry ;

: issuedbcmds ( -- caddr u nerror ) \ nerror is false if db query is ok
    sendsqlite3cmd \ if nerror is not false caddr u will contain the error otherwise it is the sqlite3 message
    if
	5 ms sendsqlite3cmd
	if
	    10 ms sendsqlite3cmd drop 
	then
    then
    dberrmsg
    dup false = if
	swap drop swap drop dbret$ rot
    then ;

: getlastdata ( -- )
    s" select DTHtemperature,DTHhumd,BMPpressure,row,datetime(dtime,'unixepoch','localtime') from thpdata limit 1 offset ((select max(row) from thpdata)-1);" dbcmds
    issuedbcmds to rvdataerror rvdata$ $! ;

: getrawx ( drow -- caddr u nerror )
    1 s>d d- dto$ 
    s" select row,datetime(dtime,'unixepoch','localtime'),age,DTHtemperature,DTHhumd,BMPtemperature,BMPpressure from thpdata limit 1 offset "  junks$ $!
    junks$ $+! s" ;" junks$ $+!
    junks$ $@ dbcmds
    issuedbcmds ;

: totalerrors ( -- dmaxerrors nerror )
    s" select max(row) from errors;" dbcmds
    issuedbcmds if
	2drop 0 0 dberrmsg -rot 2drop
    else
	#uptocomma  
    then ;
	
: temperature ( -- dtemp nerror )
    rvdata$ $@ 0 #pastxcomma ;

: humidity ( -- dhumd nerror )
    rvdata$ $@ 1 #pastxcomma ;

: pressure ( -- dpress nerror )
    rvdata$ $@ 2 #pastxcomma ;

: totaldata ( -- dmaxdata nerror )
    rvdata$ $@ 3 #pastxcomma ;

: lasttime ( -- caddr u nerror )
    rvdata$ $@ 4 $pastxcomma ;


: newtime ( -- d nerror )
    rvdata$ $@ 0 $pastxcomma if #uptocomma else false then  ;

getlastdata

: notvalidmsg ( -- )
    s" not valid or unavailable!" type ;

$>
<body>
<h1><p> Last logged temperature value was: <$ temperature rvdataerror false = and [if] d>f 10 s>d d>f f/ 7 1 2 f.rdp s" C" type [else] notvalidmsg 2drop [then] $> </p></h1>
<h1><p> Last logged humidity value was: <$ humidity rvdataerror false = and [if] d>f 10 s>d d>f f/ 7 1 2 f.rdp s" rH" type [else] notvalidmsg 2drop [then] $> </p></h1>
<h1><p> Last logged pressure value was: <$ pressure rvdataerror false = and [if] d. s" pa" type [else] notvalidmsg 2drop [then] $> </p></h1>
<h1><p> Total data Points: <$ totaldata rvdataerror false = and [if] d. [else] notvalidmsg 2drop [then] $> </p></h1>
<h1><p> Last data point time was: <$ lasttime rvdataerror false = and [if] type [else] notvalidmsg 2drop [then] $> </p></h>
<h1><p> Raw data: <$ totaldata [if] getrawx [if] notvalidmsg 2drop [else]  type [then] [else] notvalidmsg 2drop [then] $> </p></h1>
<h1><p> Total errors <$ totalerrors [if]  d. [else] notvalidmsg 2drop [then] $> </p></h1>
</body>
</html>
