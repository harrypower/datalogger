<!DOCTYPE html>
<HTML>
<HEAD>  
<meta charset="utf-8">
<TITLE>50 THP data Charts</TITLE>  
</HEAD>  
<BODY>  

<$
 
include ../string.fs
include ../Gforth-Tools/sqlite3_gforth_lib.fs
decimal

variable datalogger_path$
variable dbpath$
variable junks$
variable presql$
variable postsql$
variable lablesnow$
variable datanow$
variable lablesday$
variable tempday$
variable humdday$
variable presday$
variable datenow$
variable alldata$

false value datecheck
0 value selectedrow
variable selectyear$
variable selectday$
variable selectmonth$
variable selecthour$
variable selectymd$

s" /var/lib/datalogger-gforth/datalogger_home_path" slurp-file datalogger_path$ $!
s" /collection/sensordb.data" datalogger_path$ $@ junks$ $! junks$ $+!
junks$ $@ dbname
junks$ $@ dbpath$ $!


: dto$ ( d -- caddr u )  \ convert double signed to a string
    swap over dabs <<# #s rot sign #> #>> ;

: nextcomma ( caddr u -- caddr1 u1 nflag ) \ nflag is true if next comma is found and caddr u contains the string past that comma
    s" ," search if
	1 - swap 1 + swap true else false
    then ;

: #uptocomma { caddr u -- d nflag } \ nflag is true is d is the number from string before a comma
    caddr u s" ," search if
	swap drop u swap - caddr swap s>number?
    else
	2drop 0 0 false
    then ;

: #pastxcomma { caddr u n#comma -- d nflag } \ nflag is true if n#comma is found and a number d can be extracted from it
    try
	n#comma 0 ?do
	    caddr u nextcomma true = if to u to caddr else true throw then
	loop
	caddr u #uptocomma true = if false else 2drop true then
    restore if 0 0 false else true then
    endtry ;

: $pastxcomma { caddr u n#comma -- caddr1 u1 nflag } \ nflag is true if n#comma is found .. the caddr1 u1 will contain the string before that last comma
    try
	n#comma 0 ?do
	    caddr u nextcomma true = if to u to caddr else true throw then
	loop
	caddr u 2dup nextcomma true = if swap drop - 1 - false else true throw then
    restore if 0 0 false else true then
    endtry ;

: decimalAdd { caddr u -- caddr1 u1 } \ simply adds a '.' in the string at at one string place before end  of string
    u 0 = if s" ."
    else caddr u 1 - junks$ $! s" ." junks$ $+! caddr u 1 - + 1 junks$ $+! junks$ $@
    then ;

s" " dbrecordseparator
5000 mkretbuff

: getnowdate ( -- )
    s" " dbfieldseparator
    s" select date('now','localtime')" dbcmds
    sendsqlite3cmd drop dbret$ datenow$ $! ;

: getlastdate ( -- )
    s" ," dbfieldseparator
    s" select date(dtime,'unixepoch','localtime') from thpdata limit 1 offset ((select max(rowid) from thpdata) -1);" dbcmds
    sendsqlite3cmd drop dbret$ 1 - datenow$ $! ;

: checkdateTimeinDB ( -- nflag )  \ checks the date string in selectymd$ variable to see if 1 entrys in db close to that time
    s" ," dbfieldseparator
    s" select row from thpdata where (datetime(dtime,'unixepoch','localtime') > " presql$ $!
    s" '" presql$ $+! selectymd$ $@ presql$ $+! s" '" presql$ $+!
    s" ) limit 1 ;" presql$ $+! presql$ $@ dbcmds
    sendsqlite3cmd drop dbret$
    0 #pastxcomma to datecheck d>s to selectedrow
    datecheck ;

: isnull? ( caddr u -- caddr1 u1 ) \ look for "NULL," in the string and if not found return string but if found return ","
    2dup s" NULL," search if 2drop 2drop s" ," else 2drop then ; 

: add0$ ( caddr u -- caddr1 u1 ) \ simply adds a "0" to begining of sting if string caddr u only contains one char at entry
    dup 1 = if s" 0" pad $! pad $+! pad $@ then ;

: parseyear$ ( caddr u -- caddr1 u1 nflag )  \ finds the string 'year=' in the string simply returns the 4 strings chars after the 'year=' string
    s" year=" search if drop 5 + 4 2dup s>number? swap drop swap drop  else false then ;
: parsemonth$ ( caddr u -- caddr1 u1 nflag ) \ finds the string 'month=' then returns only the string up to the '&' string
    s" month=" search if drop 6 + 2 2dup s" &" search if 2drop 1 - add0$ 2dup s>number? swap drop swap drop else 2drop add0$ 2dup s>number? swap drop swap drop then else false then ;
: parseday$ ( caddr u -- caddr1 u1 nflag ) \ find the string 'day=' then returns only the string up to the '&' string after 'day=' string
    s" day=" search if drop 4 + 2 2dup s" &" search if 2drop 1 - add0$ 2dup s>number? swap drop swap drop else  2drop add0$ 2dup s>number? swap drop swap drop then else false then ;
: parsehour$ ( caddr u -- caddr1 u1 nflag ) \ find the string 'hour=' then returns only the string that is the hour input 
    s" hour=" search if swap 5 + swap 5 - dup 2 > if drop 2 then add0$ 2dup s>number? swap drop swap drop else false then ;

: getalldata ( -- )
    s" ," dbfieldseparator
    s" " dbrecordseparator
    s" select datetime(dtime,'unixepoch','localtime'),DTHtemperature,DTHhumd," presql$ $!
    s" BMPpressure from thpdata " presql$ $+!
    s" limit 50 offset ((select max(rowid) from thpdata)-50) ;" presql$ $+!
    presql$ $@ dbcmds sendsqlite3cmd drop
    dbret$ alldata$ $! ;

: getAdatetime ( -- )
    s" ," dbfieldseparator
    s" " dbrecordseparator
    s" select datetime(dtime,'unixepoch','localtime'),DTHtemperature,DTHhumd," presql$ $!
    s" BMPpressure from thpdata " presql$ $+!
    s" where (row >= '" presql$ $+! selectedrow s>d dto$ presql$ $+! s" ')" presql$ $+!
    s" limit 50 ;" presql$ $+!
    presql$ $@ dbcmds sendsqlite3cmd drop
    dbret$ alldata$ $! ;

: getdaylablesfromall ( -- )
    lablesday$ $init
    51 0 ?do
	alldata$ $@ i 4 * $pastxcomma true =  if s\" \"" lablesday$ $+! lablesday$ $+! s\" \"," lablesday$ $+! else 2drop then
    loop
    lablesday$ $@ 1 - lablesday$ $init lablesday$ $! ;
\ note just found a bug in strings.fs package.  i need to $init the variable before putting the string back into itself
\ or use another variable temporarily then copy back to the original variable.
\ I think this has been fixed in new version of strings.fs

: gettempfromall ( -- )
    tempday$ $init
    51 0 ?do
	alldata$ $@ i 4 * 1 + $pastxcomma true = if decimalAdd tempday$ $+! s" ," tempday$ $+! else 2drop then
    loop
    tempday$ $@ 1 - tempday$ $init tempday$ $! ;

: gethumdfromall ( -- )
    humdday$ $init
    51 0 ?do
	alldata$ $@ i 4 * 2 + $pastxcomma true = if decimalAdd humdday$ $+! s" ," humdday$ $+! else 2drop then
    loop
    humdday$ $@ 1 - humdday$ $init humdday$ $! ;

: getpresfromall ( -- )
    presday$ $init
    51 0 ?do
	alldata$ $@ i 4 * 3 + $pastxcomma true = if presday$ $+! s" ," presday$ $+! else 2drop then
    loop
    presday$ $@ 1 - presday$ $init presday$ $! ;

url-args $@ swap drop 0 =
[if]
    getalldata
[else]
    url-args $@ parseyear$  -rot  selectyear$ $!
    url-args $@ parsemonth$ -rot  selectmonth$ $!
    url-args $@ parseday$  -rot  selectday$ $!
    url-args $@ parsehour$ -rot  selecthour$ $!
    and and and true =
    [if] 
	selectyear$ $@ selectymd$ $! s" -" selectymd$ $+! selectmonth$ $@ selectymd$ $+! s" -" selectymd$ $+! selectday$ $@ selectymd$ $+!
	s"  " selectymd$ $+! selecthour$ $@ selectymd$ $+! s" :00" selectymd$ $+!
	selectymd$ $@ datenow$ $!
	checkdateTimeinDB true = 
	[if]
	    getAdatetime
	[else]
	    getalldata
	[then]
    [else]
	getalldata
    [then]
[then]

getdaylablesfromall
gettempfromall
gethumdfromall
getpresfromall

$>

<script src="../chart/Chart.js"></script>


<div style="position: relative; width: 1400px; height: 420px;">
<canvas id="tempChart" width="1400" height="410" ></canvas>
</div>
<div style="position: absolute; top:0px; left:0px;">
<canvas id="tcl" width="1400" height="410"></canvas>
</div>


<div style="position: relative; width: 1400px; height: 420px;">
<canvas id="humdChart" width="1400" height="410"></canvas>
</div>
<div style="position: absolute; top:421px; left:0px;">
<canvas id="hCl" width="1400" height="410"></canvas>
</div>


<div style="position: relative; width: 1400px; height: 420px;">
<canvas id="pressureforthChart" width="1400" height="410"></canvas>
</div>
<div style="position: absolute; top:841px; left:0px;">
<canvas id="pCl" width="1400" height="410"</canvas>
</div>


<script>
  var tempoptions = { 'pointDotRadius':2 , 'scaleFontColor': "#572", 'scaleFontFamily': "'Comic Sans MS'",'scaleFontStyle': "bold" };
  var tempdata = {
  labels : [ <$ lablesday$ $@ type $> ],
    datasets : [
    {
    fillColor : "rgba(120,220,250,0.5)",
    strokeColor : "rgba(220,220,220,1)",
    pointColor : "rgba(220,220,220,1)",
    pointStrokeColor : "#fff",
    data : [ <$ tempday$ $@ type $> ]
      }
      ]
      }
      
      var tempctx = document.getElementById("tempChart").getContext("2d");
      var mytempChart = new Chart(tempctx).Line(tempdata,tempoptions);
      
      var tlctx = document.getElementById("tcl").getContext("2d");
      tlctx.fillStyle="#572";
      tlctx.font="30px Comic Sans MS";
      tlctx.fillText('Temperature data',500,40);
	tlctx.fillStyle="red";
	tlctx.font="15px Comic Sans MS";  
        tlctx.fillText('C',140 ,240);
	tlctx.fillText('Time',190,270);
        tlctx.beginPath();
        tlctx.moveTo(140,220);
        tlctx.lineTo(140,180);
        tlctx.lineTo(145,190);
        tlctx.moveTo(240,270);
        tlctx.lineTo(290,270);
        tlctx.lineTo(280,265);
        tlctx.strokeStyle="red";
        tlctx.stroke();
</script>

<script>
  var humdoptions = { 'pointDotRadius':2 , scaleFontColor : "#572", scaleFontFamily : "'Comic Sans MS'", scaleFontStyle : "bold" };
  var humddata = {
  labels : [ <$ lablesday$ $@ type $> ],
    datasets : [
    {
    fillColor : "rgba(120,220,250,0.5)",
    strokeColor : "rgba(220,220,220,1)",
    pointColor : "rgba(220,220,220,1)",
    pointStrokeColor : "#fff",
    data : [ <$ humdday$ $@ type $> ]
      }
      ]
      }
      
      //Get the context of the canvas element we want to select
      var humdctx = document.getElementById("humdChart").getContext("2d");
      var myhumdChart = new Chart(humdctx).Line(humddata,humdoptions);
      
      var hclctx = document.getElementById("hCl").getContext("2d");
      hclctx.fillStyle="#572";
      hclctx.font="30px Comic Sans MS";
      hclctx.fillText('Relative Humidity data',500,40);
        hclctx.fillStyle="red";
	hclctx.font="15px Comic Sans MS";
        hclctx.fillText('% rH',140 ,240);
        hclctx.fillText('Time',190,270);
        hclctx.beginPath();
        hclctx.moveTo(140,220);
	hclctx.lineTo(140,180);
        hclctx.lineTo(145,190);
        hclctx.moveTo(240,270);
        hclctx.lineTo(290,270);
        hclctx.lineTo(280,265);
        hclctx.strokeStyle="red";
        hclctx.stroke();
</script>

<script>
  var pressoptions = { 'pointDotRadius':2 , scaleFontColor : "#572", scaleFontFamily : "'Comic Sans MS'", scaleFontStyle : "bold" };
  var pressuredata = {
  labels : [ <$ lablesday$ $@ type $> ],
    datasets : [
    {
    fillColor : "rgba(120,220,250,0.5)",
    strokeColor : "rgba(220,220,220,1)",
    pointColor : "rgba(220,220,220,1)",
    pointStrokeColor : "#fff",
    data : [ <$ presday$ $@ type $> ]
      }
      ]
      }
      
      //Get the context of the canvas element we want to select
      var pressurectx = document.getElementById("pressureforthChart").getContext("2d");
      var mypressChart = new Chart(pressurectx).Line(pressuredata,pressoptions);
      
      var pclctx = document.getElementById("pCl").getContext("2d");
      pclctx.fillStyle="#572";
      pclctx.font="30px Comic Sans MS";
      pclctx.fillText('Barometric Pressure data',500,40);
        pclctx.fillStyle="red";
        pclctx.font="15px Comic Sans MS";
        pclctx.fillText('pa',140 ,240);
        pclctx.fillText('Time',190,270);
	pclctx.beginPath();
	pclctx.moveTo(140,220);
	pclctx.lineTo(140,180);
	pclctx.lineTo(145,190);
	pclctx.moveTo(240,270);
	pclctx.lineTo(290,270);
	pclctx.lineTo(280,265);
	pclctx.strokeStyle="red";
	pclctx.stroke();
</script>

<form action="thp-fifty-chart.shtml" method="get">
Year <input type="number" name="year" min="2014" max="2020" step="1" value="2014"><br>
Month <input type="number" name="month" min="1" max="12" step="1" value="1"><br>
Day <input type="number" name="day" min="1" max="31" step="1" value="1"><br>
Hour <input type="number" name="hour" min="0" max="60" step="1" value="0"><br>
<input type="submit" value="Display 50 data points starting at this selected date & time">
</form>	  
	  
<$ url-args $@ s" testt" search swap drop swap drop 
   [if]
   s" <h3>datetimetest: " type  checkdateTimeinDB . s" </h3><br>" type
   [then]
$>

</BODY>  
</HTML>

